{
  "comments": [
    {
      "content": "- `COND` - general input.\n- `T` - value passed to the `R` pin if `COND` receives true.\n- `F` - value passed to the `R` pin if `COND` receives false.\n- `R` - general output\n",
      "id": "HyjM1O9oW",
      "position": {
        "units": "slots",
        "x": 11,
        "y": 1
      },
      "size": {
        "height": 2,
        "units": "slots",
        "width": 11
      }
    },
    {
      "content": "All the math comparison nodes return true or false.\n\nLet's imagine that you need to turn the servo to a certain angle, for instance to 45째 when you receive true, and to 135째 when you receive false. How can we make that work?\n\t\nThere is an `if-else` node in `xod/core`. The `COND` pin of this node checks the boolean input value. If `COND` receives true, the node sets the value from the `T` pin to the `R` pin. When it receives false, it sets the value from the `F` pin to the `R` pin.\n\n## Instructions\n\n1. [Assemble the circuit with a servo](https://xod.io/docs/tutorial/19-if-else/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial_19).\n\n2. Define the value on the `RHS` pin of the `greater` node. This value will be compared to the value from the photoresistor (coming to the `LHS` pin).\n\n3. Define the values for the `T` and `F` pins on the `if-else` node. These values will be sent to the servo. Remember about the value range of the servo node: 45째 of the servo will be 0.25, and 135째 will be 0.75.\n\n4. Upload the patch to the Arduino.\n\nNow, if the comparison condition is true, the servo will turn to the angle set in the `T` pin of the `if-else` node or, otherwise, to the angle set in the `F` pin of the same node.",
      "id": "rJKFUe4cW",
      "position": {
        "units": "slots",
        "x": -3,
        "y": -1
      },
      "size": {
        "height": 7,
        "units": "slots",
        "width": 7
      }
    }
  ],
  "links": [
    {
      "id": "HJ7oTSqbQ",
      "input": {
        "nodeId": "Bkxay1E5Z",
        "pinKey": "rJg00Nhe-"
      },
      "output": {
        "nodeId": "SkliaBq-Q",
        "pinKey": "BkoeN9Ay7"
      }
    },
    {
      "id": "Hk5wdU9oW",
      "input": {
        "nodeId": "By4w_LqoZ",
        "pinKey": "r1sfQ_6fb"
      },
      "output": {
        "nodeId": "BywpJ149Z",
        "pinKey": "S13xLCuHvkW"
      }
    },
    {
      "id": "r1Z_QZEcb",
      "input": {
        "nodeId": "BywpJ149Z",
        "pinKey": "S1yZIA_rDJZ"
      },
      "output": {
        "nodeId": "Bkxay1E5Z",
        "pinKey": "B19RYS3lW"
      }
    }
  ],
  "nodes": [
    {
      "boundLiterals": {
        "HJbACN3gb": "0"
      },
      "id": "Bkxay1E5Z",
      "position": {
        "units": "slots",
        "x": 7,
        "y": 0
      },
      "type": "xod/core/greater"
    },
    {
      "boundLiterals": {
        "S1vGmu6Gb": "D9"
      },
      "id": "By4w_LqoZ",
      "position": {
        "units": "slots",
        "x": 7,
        "y": 2
      },
      "type": "xod/common-hardware/servo"
    },
    {
      "boundLiterals": {
        "r1AgIROHDJW": "0",
        "ryTeUROHD1b": "0"
      },
      "id": "BywpJ149Z",
      "position": {
        "units": "slots",
        "x": 7,
        "y": 1
      },
      "type": "xod/core/if-else"
    },
    {
      "boundLiterals": {
        "r1l3XcR17": "A2"
      },
      "id": "SkliaBq-Q",
      "position": {
        "units": "slots",
        "x": 7,
        "y": -1
      },
      "type": "xod/common-hardware/analog-sensor"
    }
  ]
}
